
# coding: utf-8

#%%
import numpy as np
import pandas as pd
import re
from datetime import datetime

np.set_printoptions(threshold=100000)
pd.options.display.max_rows = 500
pd.options.display.max_columns = 100
pd.set_option('expand_frame_repr', False)

#%% 定义字典
dict_peitao = [
    {'col': '配套用房_总', 'p': ['配套商业及行政办公', '配套综合服务']},
    {'col': '配套用房_宿舍食堂', 'p': ['宿舍', '食堂', '值班休息', '宿舍及配套', '配餐', '餐厅']},
    {'col': '配套用房_配套办公', 'p': ['配套办公', '办公配套', '配套行政办公']},
    {'col': '配套用房_配套商业', 'p': ['配套商业', '商业配套','配套商业设施', '配套商业服务设施']},
    {'col': '配套用房_配套管理', 'p': ['配套管理']},
    {'col': '配套用房_配套服务设施', 'p': ['配套附属设施', '配套服务设施', '配套管理服务', '配套公共服务设施', '配套服务']},
    {'col': '配套用房_市政配套', 'p': ['市政配套']},
    {'col': '托儿所', 'p': ['托儿所', '托幼']},
    
]

dict_res = [
    {'col': '住宅_人才住房', 'p': ['人才住房', '人才安居住房', '人才安居房', '人才房']},
    {'col': '住宅_安居型商品房', 'p': ['安居型商品房']},
    {'col': '住宅_公共租赁住房', 'p': ['公共租赁住房', '保障性住房', '保障性', '公共租赁房',  '公共租赁','公共租赁型住房', '保障房']},
    {'col': '住宅_总', 'p': ['居住', '住宅', '住房']},
    {'col': '住宅_人才公寓', 'p': ['人才公寓']},
    {'col': '住宅_别墅', 'p':['别墅']},
    {'col': '住宅_回迁住房', 'p':['回迁住房']}
]

dict_ind = [
    {'col': '产业_工业用房', 'p': ['厂房', '设备', '车间', '工厂', '生产']},
    {'col': '产业_仓库仓储', 'p': ['仓库', '仓储']},
    {'col': '产业_物流', 'p': ['物流']},
    {'col': '产业_创新型产业用房', 'p': ['创新型产业', '新型产业', '创新产业', '创新性产业']},
    {'col': '产业_科研用房', 'p': ['科研']},
    {'col': '产业_生产实验', 'p': ['生产实验']},
    {'col': '产业_生产辅助', 'p': ['生产辅助', '生产配套']},
    {'col': '产业_生产和附属设施', 'p': ['生产和附属设施', '生产设施']},
    {'col': '产业_总', 'p': ['厂房及配套', '研发', '产业生产', '工业', '产业']},
    {'col': '产业配套', 'p': ['产业配套', '工业配套']},
]

dict_com = [
    {'col': '商业_地下商业', 'p': ['地下商业']},
    {'col': '商业', 'p': ['商业', '商业设施', '商业服务设施']},
    {'col': '商场', 'p': ['商场']},
    {'col': '办公', 'p': ['办公']},
    {'col': '商务公寓', 'p': ['商务公寓']},
    {'col': '公寓', 'p': ['公寓']},
    {'col': '服务业', 'p': ['服务业']},
    {'col': '文化设施', 'p': ['文化设施',]},
    {'col': '会所', 'p': ['会所']},
    {'col': '剧院', 'p': ['剧院', '剧院及配套', '剧院及其配套']},
    {'col': '美术馆', 'p': [ '美术馆']},
    {'col': '艺术馆', 'p': [ '艺术馆']},
    {'col': '体育馆', 'p': [ '体育馆']},
    {'col': '纪念馆', 'p': [ '纪念馆']},
    {'col': '科技馆', 'p': [ '科技馆']},
    {'col': '青少年宫', 'p': [ '青少年宫']},

    {'col': '艺术综合', 'p': [ '艺术综合', '艺术服务', '艺术']},
    {'col': '音乐厅', 'p': [ '音乐厅']},
    {'col': '地下博物馆', 'p': [ '地下博物馆']},
    {'col': '博物馆', 'p': [ '博物馆']},
    {'col': '攀岩馆', 'p': [ '攀岩馆']},
    {'col': '图书馆', 'p': [ '图书馆']},
    
    {'col': '书城', 'p': ['书城']},
    {'col': '书店', 'p': ['书店']},
    {'col': '展览馆厅', 'p': [ '展览厅', '展览馆']},
    {'col': '游乐设施', 'p': ['地上游乐设施', '地上游乐设施及相关配套']},
    {'col': '酒店', 'p': ['酒店', '旅馆业', '宾馆']},
    {'col': '旅游度假区', 'p': ['旅游区', '度假区', '欢乐海湾', "欢乐岛"]},
    {'col': '游客服务', 'p': ['游客服务']},
    {'col': '游泳馆', 'p': ['游泳跳水馆', '游泳馆', '游泳训练馆', '游泳']},
    {'col': '射击馆', 'p': ['射击馆']},
    {'col': '网球馆', 'p': ['网球馆']},
    {'col': '训练馆', 'p': ['训练馆']},
    {'col': '实验室', 'p': ['实验室', '实验']},
    {'col': '青少年活动室', 'p': ['青少年活动']},
    {'col': '实验室', 'p': ['实验室', '实验']},
]

dict_pub = [
    {'col': '计容总面积', 'p': ['容积率', '容积率为', '容积率的']},
    {'col': '公共设施配套_总', 'p': ['公共配套设施', '公共配套', '公建配套设施', '公建配套', '社区配套']},
    {'col': '公共设施配套_居委会', 'p': ['居委会']},
    {'col': '公共设施配套_社区管理', 'p': ['社区管理']},
    {'col': '公共设施配套_便民服务站', 'p': ['便民服务站']},
    {'col': '公共设施配套_社区服务中心', 'p': ['社区服务站', '社区服务']},
    {'col': '公共设施配套_社区综治办', 'p': ['社区综治办']},
    {'col': '公共设施配套_社区警务室', 'p': ['警务室', '社区警备室']},
    {'col': '公共配套设施_党群服务中心', 'p':['党群服务']},
    {'col': '公共设施配套_文体活动', 'p': ['文体活动', '文体活动站', '文体活动室', '文体设施', '社区活动', '小区活动室']},
    {'col': '公共设施配套_文化活动', 'p': ['文化活动站', '文化活动室', '文化室', '文化娱乐', '文化站', '文化活动', '文化设施', '小区级文化室', '文化']},
    {'col': '公共设施配套_体育活动', 'p': ['社区体育活动', '社区运动', '体育活动室', '体育室', '体育', '体育设施', '体育活动结合屋顶设置']},
    {'col': '公共设施配套_社区健康', 'p': ['社区健康服务', '社区社康', '社区康体', '社区康复', '社区健康', '社康']},
    {'col': '公共设施配套_社区医疗保健服务', 'p': ['社区医疗保健服务']},
    {'col': '公共设施配套_社区工作站', 'p': ['社区工作站']},
    {'col': '公共设施配套_社区图书室', 'p': ['社区图书室']},
    {'col': '公共设施配套_日间照料中心', 'p': ['照料中心', '照料', '照料服务']},
    {'col': '公共设施配套_老年活动', 'p': ['老年活动', '老年活动室', '老年人活动站', '老人活动', '老年人活动']},
    {'col': '公共设施配套_养老院', 'p': ['养老院', '敬老院', '老人颐养院']},
    {'col': '公共设施配套_老年之家', 'p': ['老年之家']},
    {'col': '公共设施配套_老人用房及附属设施用房', 'p': ['老人及附属设施']},
    {'col': '公共设施配套_儿童福利院', 'p': ['儿童福利院']},
    {'col': '公共设施配套_残疾人综合服务', 'p': ['残疾']},
    
    {'col': '公共设施配套_菜市场', 'p': ['菜市场']},
    {'col': '公共设施配套_卫生站', 'p': ['卫生站']},
    {'col': '公共配套设施_垃圾站', 'p': ['垃圾站', '垃圾收集站', '垃圾收集点', '垃圾处理站', '垃圾转运站','垃圾转运存放及辅助', '垃圾回收站', '垃圾']},
    {'col': '公共配套设施_再生资源回收点', 'p': ['再生资源回收点', '再生资源回收站']},
    {'col': '公共配套设施_公厕', 'p': ['公厕', '公共厕所', '公共卫生间', '卫生间']},
    {'col': '公共配套设施_污水处理站', 'p': ['污水处理站', '污水处理设施及配套', '污水']},
    {'col': '公共配套设施_公交场站', 'p': ['公交场站', '公交站场', '公交站', '换乘站', '公交首末站']},
    {'col': '公共配套设施_公交配套', 'p': ['公交运营', '公交配套']},
    {'col': '公共配套设施_综合车站', 'p': ['综合车站']},
    {'col': '公共配套设施_自行车停靠点', 'p': ['自行车停靠点', '自行车停放及租赁服务']},
    {'col': '公共配套设施_自行车棚', 'p': ['自行车棚', '自行车库']},
    {'col': '公共配套设施_充电站', 'p': ['充电站','充电桩']},
    {'col': '公共配套设施_邮政', 'p': ['邮政局','邮政所', '邮电设施', '邮电所', '邮政']},
    {'col': '公共配套设施_消防', 'p':['消防', '消防站', '消防设施']},
    {'col': '公共配套设施_变电站', 'p':['变电站', '变电所', '变电设施', '变电']},
    {'col': '公共配套设施_环卫工人休息站', 'p':['环卫工人休息站', '环卫工作休息站', '环卫工人休息房', '环卫工人作息站', '环卫工人作息房', '环卫工人休息室', '环卫工人作息室']},
    {'col': '公共配套设施_机房', 'p':['机房', '通信机房']},
    {'col': '公共配套设施_通信基站', 'p':['移动通信基站']},
    {'col': '公共配套设施_公共配套用房', 'p':['公共配套用房']},
    {'col': '公共配套设施_公共空间', 'p':['公共空间', '公共开放区域']},

    
    # {'col': '公共设施配套_幼儿园_建面', 'p':['幼儿园']},
    
]

dict_edu = [
    {'col': '中学', 'p': ['中学', '初中教学']},
    {'col': '小学', 'p': ['小学教学', '小学']},
    {'col': '高等教育', 'p': ['高等教育']},
    {'col': '风雨操场', 'p': ['风雨操场', '操场']},
    {'col': '体育', 'p': ['体育']},
    {'col': '教室', 'p': ['教室']},
    {'col': '功能教室及辅助教室', 'p': ['功能教室及辅助教室']},
    {'col': '继续教育基地', 'p': ['继续教育基地']},
    {'col': '教学综合', 'p': ['教学及教学辅助', '教学']},
    {'col': '文体楼', 'p': ['文体', '体艺']},
    {'col': '文体楼', 'p': ['校舍', '校舍']},
    {'col': '学校', 'p': ['学校']}
]

dict_tra = [
    {'col': '交通_交通枢纽', 'p': ['交通枢纽']},
    {'col': '交通_运营用房', 'p': ['运营', '运营调度', '运营管理', '营运管理', '营运']},
    {'col': '交通_作业及维修', 'p': ['作业及维修']},
    {'col': '交通_储油设施', 'p': ['储油设施']},
    {'col': '交通_拖车停车', 'p': ['拖车停车']},
    {'col': '交通_旅检区高架平台', 'p': ['旅检区高架平台']},
    {'col': '交通_长途', 'p': ['长途']},
    {'col': '交通_公交', 'p': ['公交']},
    {'col': '交通_出租车', 'p': ['出租车']},
    {'col': '交通_站务', 'p': ['站务', '站房']},
    {'col': '交通_加油棚', 'p': ['加油']},
    {'col': '交通_加气棚', 'p': ['加气']},
    {'col': '交通_旅检区高架平台', 'p': ['旅检区高架平台']},
]

dict_other = [
    {'col': '其他_地下停车场', 'p':['地下停车场', '地下停车库', '地下车库']},
    {'col': '其他_停车场', 'p': ['停车场', '停车库', '车库', '多层车库']},
    {'col': '其他_公共停车位', 'p':['公共停车位']},
    {'col': '其他_配电装置', 'p':['配电装置', '配电站', '配电']},
    {'col': '其他_机房', 'p':['机房']},
    {'col': '其他_泵房', 'p':['泵房']},
    {'col': '其他_门卫房', 'p':['门卫房', '门卫室', '传达室', '门卫', '门房']},
    {'col': '其他_值班室', 'p':['值班室', '值班房']},
    {'col': '其他_营业厅', 'p':['营业厅', '营业']},
    {'col': '其他_锅炉房', 'p':['锅炉房']},
    {'col': '其他_拘留室', 'p':['拘留室', '拘留房']},
    {'col': '其他_警传室', 'p':['警传室', '警卫室']},
    {'col': '其他_派出所', 'p':['派出所']},
    {'col': '其他_低压室', 'p':['低压室', '低压房']},
    {'col': '其他_站控室', 'p':['站控室', '站控房']},
    {'col': '其他_工具房', 'p':['工具房', '工具室']},
    {'col': '其他_自用', 'p':['自用']},
    {'col': '其他_后勤管理', 'p':['后勤']},
    {'col': '其他_招待所', 'p':['招待所']},
    {'col': '其他_批发市场', 'p':['批发市场']},
    {'col': '其他_棚罩', 'p':['棚罩']},
    {'col': '其他_业主委员会', 'p': ['业主委员会']},
    {'col': '其他_调解室', 'p': ['调解室']},
    {'col': '其他_党员活动室', 'p': ['党员活动室']},
    {'col': '其他_老人之家', 'p': ['老人之家']},
    {'col': '其他_小卖部', 'p': ['小卖部']},
    {'col': '其他_物业', 'p':['物管', '物业服务', '物业', '物业管理', '物业服务办公']},  # 放在办公之前
    {'col': '其他_生活', 'p':['生活服务', '生活']},
    # {'col': '其他_综合', 'p':['综合']},  # 放在最后
]

dict_gov = [
    {'col': '公共管理_业务用房', 'p': ['业务']},
    {'col': '公共管理_发射台', 'p': ['发射台']},
    {'col': '公共管理_营业及演示用房', 'p': ['营业及演示']}, 
    {'col': '公共管理_展厅', 'p': ['展厅']},   
    {'col': '公共管理_训练塔', 'p': ['训练塔']}, 
    {'col': '公共管理_抢修及服务', 'p': ['抢修及服务', '抢险及其配套', '抢险值班', '抢险及配套']}, 
    {'col': '公共管理_管理用房', 'p': ['管理']},    
    {'col': '公共管理_功能房', 'p': ['功能房', '功能']}, 
    {'col': '公共管理_事故油池', 'p': ['事故油池']}, 
    {'col': '公共管理_实训', 'p':['实训']}, 
    {'col': '公共管理_综合控制', 'p':['综合控制及热水炉间', '综合控制', '控制室']},
    {'col': '公共管理_综合服务', 'p': ['综合服务', '综合服务站', '综合馆']}, 
    {'col': '公共管理_住院大楼', 'p': ['住院']}, 
    {'col': '公共管理_急诊', 'p': ['急诊']}, 
    {'col': '公共管理_门诊', 'p': ['门诊部', '门诊']},
    {'col': '公共管理_医技楼', 'p': ['医技']}, 
    {'col': '公共管理_保障系统', 'p': ['保障系统']}, 
    {'col': '公共管理_行政管理', 'p': ['行政管理']}, 
    {'col': '公共管理_预防保健', 'p': ['预防保健', '预防保建', '保健']},
    {'col': '公共管理_开关楼', 'p': ['开关']},
    {'col': '公共管理_加油站', 'p': ['加油站']},
    {'col': '公共管理_清水池', 'p': ['清水池']},
    {'col': '公共管理_环卫设施', 'p': ['环卫工具和其它设施', '环卫设施']},
    {'col': '公共管理_地下医疗街', 'p': ['地下医疗街']},
    {'col': '公共管理_公园管理处', 'p': ['公园管理处']},
    {'col': '公共管理_发电站房', 'p': ['发电']},
    {'col': '公共管理_供电设施', 'p': ['供电设施']},
    {'col': '公共管理_卫星通讯', 'p': ['卫星']},
    {'col': '公共管理_通讯机楼', 'p': ['通讯机楼']},
    {'col': '公共管理_环卫工人工作站', 'p': ['环卫工人工作站']},
    {'col': '公共管理_服务窗口', 'p': ['服务窗口']},
    {'col': '公共管理_孵化单元', 'p':['孵化']},
    {'col': '公共管理_会议室', 'p':['会议室']},
    {'col': '公共管理_监测站', 'p':['监测站']},
    {'col': '公共管理_调压站', 'p':['调压站']},
    {'col': '公共管理_阀室', 'p':['阀室']},
    {'col': '市政公用设施', 'p': ['市政公用设施', '市政']},
    {'col': '绿化', 'p': ['绿化', '绿地']},
]
# 特殊处理，不进入循环，仅列出
dict_num = [
    {'col': '公共设施配套_幼儿园_地面', 'p': ['独立']},  
    {'col': '公共停车位（个）', 'p':['公共停车位']},
    {'col': '公共设施配套_幼儿园_班数', 'p': ['班']},  
    
]

# In[61]:定义匹配模式
class Buliding:
    def __init__(self, df, con):
        self.re_list = []
        self.con = con
        self.df = df
        
    def get_num(self, j, pattern, con, ty):
        list_sum = 0
        pt = re.findall(re.compile(pattern), con)
        if pt:
            num = 0
            for k in range(0, len(pt)):
                num = num + float(pt[k][0])
                self.re_list.append(j + "".join(pt[k][0]))
                if ty==1:
                    self.con = self.con.replace(j + "".join(pt[k][0]), '', 1) 
                if ty==2:
                    self.con = self.con.replace("".join(pt[k][0]) + '的'+j,'', 1)
                if ty==3: 
                    self.con = self.con.replace("".join(pt[k][0]),'', 1)
            list_sum = list_sum + num
        
        return list_sum
            
    def get_df_num(self, dict_all, pub):
        # 先处理特殊情况
        child_tu = child_tu_all = 0
        child_ban = 0
        child_jian = 0
        car_num = 0
        sp = re.split('[,，。、；]', self.con)
        if sp:
            for s in sp:
                if "幼儿园" in s:
                    child_tu = child_tu + self.get_num('独立', '独立'+ pub_area, s, 1)
                    child_tu_all = child_tu + self.get_num('占地', '占地'+ pub_area, s, 1) + self.get_num('独立占地', '独立占地'+ pub_area, s, 1)
                    child_ban = child_ban + self.get_num('', pub_ban, s, 2)
                    self.con = self.con.replace("("+str(int(child_ban))+'班'+")", '', 1)
                    self.con = self.con.replace("（"+str(int(child_ban))+'班'+"）", '', 1)
                    self.con = self.con.replace(str(int(child_ban))+'班', '', 1)
                    child_jian = child_jian + self.get_num('幼儿园', '幼儿园'+pub_area, self.con, 1)
                if "公共停车位" in s:
                    car_num = car_num + self.get_num('', pub_ge, s, 1)
        self.df.at[index, '公共设施配套_幼儿园_建面'] = child_jian
        self.df.at[index, '公共设施配套_幼儿园_地面'] = child_tu_all
        self.df.at[index, '公共设施配套_幼儿园_班数'] = child_ban
        self.df.at[index, '公共设施配套_公共停车位'] = car_num
        
        # 循环处理各类型用地
        for i in dict_all:
            list_sum = 0
            for j in i['p']:
                pattern1 = j + pub
                pattern2 = pub + '的' + j
                sum1 = self.get_num(j, pattern1, self.con, 1) + self.get_num(j, pattern2, self.con, 2)
                if sum1 !=0:
                    list_sum = list_sum + sum1
            self.df.at[index, i['col']] = list_sum
        # 第二轮提取，拆句
        st = re.split('[,，。、；]', self.con)
        for s in st:
            pub_str = re.findall(re.compile(pub_area), s)   # 判断是否含有数字
            if pub_str:
                if len(pub_str) == 1:
                    for i in dict_all:
                        list_sum = 0
                        for j in i['p']:
                            if j in s: 
                                list_sum = list_sum + self.get_num(j, pub, s, 3)

                        self.df.at[index, i['col']] = self.df.at[index, i['col']] + list_sum
            
        st_remain = re.split('[,，。、；]', self.con)
        st_re = []
        for s in st_remain:
            pub_str = re.findall(re.compile(pub_area), s)   # 判断是否含有数字
            if pub_str:
                st_re.append(s)

        self.df.at[index, 'remain'] = '，'.join(st_re)
        
#%% 开始执行

df = pd.read_excel(r'D:/workspace/建筑面积-mis.xlsx')
df.info()
df.head()

## 筛选
# df = df[0:5]
# df = df[df.PARCEL_NO=='T403-0216']   

pub_area = '共?(\d+(\.\d+)?)(平方|平方米|平米|㎡)' 
pub_ge = '(\d+(\.\d+)?)(个)'
pub_ban = '(\d+(\.\d+)?)(班)'

dict_all =  dict_res + dict_peitao + dict_ind + dict_pub + dict_other + dict_com + dict_tra + dict_gov + dict_edu

replace_list = [
        ' ', '\n', '\r', '≤', '≥', ':', '：', '【', '】', 
        '面积', '用房', '中心', '不少于', '不小于','不超过', '不低于', '总计',  '总', '场地', '用地', 
        '建筑', '楼', '大楼', '占地，', '1处', '其中', '（班）', '（', '）'
    ]

for index, rows in df.iterrows():
    print(index)
    c = str(rows['建筑面积说明'])
    c = re.sub('（\D+）', '', c) 
    for m in replace_list:
        c = c.replace(m, '')
    buliding = Buliding(df, c)
    buliding.get_df_num(dict_all, pub_area)


# In[18]:存储
from datetime import datetime
df.to_excel(r'D:/workspace/建筑面积解析-{}.xlsx'.format(str(datetime.today())[0:13]))

# df.loc[df.index<4915, '住宅_总'] = df['住宅-总1']
# df.ix[df.index<4915, ['住宅_安居型商品房']] = df['住宅-安居型商品房1']
# df.ix[df.index<4915, ['住宅_公共租赁住房']] = df['住宅-公共租赁住房1']
# df.ix[df.index<4915, ['住宅_人才住房']] = df['住宅-人才住房1']
# df.ix[df.index<4915, ['住宅_人才公寓']] = df['住宅-人才公寓1']
df.loc[df['PARCEL_NO']=='A105-1689', '公共设施配套_幼儿园_建面'] = 2400
df.loc[df['PARCEL_NO']=='G03411-0011', '公共设施配套_幼儿园_建面'] = 2400
df.loc[df['PARCEL_NO']=='G03411-0011', '公共设施配套_幼儿园_地面'] = 3000
df.loc[df['PARCEL_NO']=='A010-0413', '公共设施配套_幼儿园_地面'] = 3600
df.loc[df['PARCEL_NO']=='A105-1689', '公共设施配套_幼儿园_地面'] = 2700
df.loc[df['PARCEL_NO']=='A113-0005', '公共设施配套_幼儿园_地面'] = 4000
df.loc[df['PARCEL_NO']=='A207-0121', '公共设施配套_幼儿园_地面'] = 5400
df.loc[df['PARCEL_NO']=='A207-0121', '公共设施配套_幼儿园_建面'] = 4800
df.loc[df['PARCEL_NO']=='A304-0082', '公共设施配套_幼儿园_地面'] = 2700

df_cols = pd.read_excel(r'D:/workspace/字段列表.xlsx')
col_list = df_cols['name'].tolist()

df = df[col_list]
df.to_excel(r'D:/workspace/建筑面积解析-{}-f-mis.xlsx'.format(str(datetime.today())[0:13]))

# In[41]:辅助查看
# df = df[0:1]
# df = df[df.PARCEL_NO=='A212-0093']

# #%%
# df = pd.read_excel(r'D:/workspace/建筑面积-mis.xlsx')

# df = df[df.PARCEL_NO]
# for index, rows in df.iterrows():
#     print(index)
#     c = str(rows['建筑面积说明'])
#     c = re.sub('（\D+）', '', c) 
#     for m in replace_list:
#         c = c.replace(m, '')
#     buliding = Buliding(df, c)
#     buliding.get_df_num(dict_all, pub_area)